akka {
  loglevel = DEBUG
  log-dead-letters = off
  log-dead-letters-during-shutdown = off
}

languages = ["ru", "kz"]

host= "0.0.0.0"
port= 8080


auth-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 10
  }
}


ecosystem {
  gateway {
    outbound {
      name = "X:gateway.in.fanout"
      type = "fanout"
    }
    inbound = "X:routing.topic"
  }
  endpoint {
    instanceId = "localhost"
    service {
      system = it
      subSystem = lab
      microservice = api
    }
  }

}


dbConfig {
  connectionPool = "HikariCP"
  logSql = true
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
  connectionTimeout = 10000
  maxConnections = 1
  minConnections = 1
  numThreads = 1

  properties = {
    serverName = "localhost"
    portNumber = "5432"
    databaseName = "oneLab"
    user = "postgres"
    password = "postgres"
  }
}


databaseUrl {
  dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
  properties = {
    driver = "org.postgresql.Driver"
    url = "postgres://user:pass@host/dbname"
  }
}



amqp {
  connection {
    host = "localhost"
    port = 5672
    user = "guest"
    password = "guest"
    reconnectionDelay = 1
    virtualHost = "/"
  }
  consumer {
    request.post {
      queue = "Q:"${host}".api.request.post.lab"
      key = "request.onePOST.*"
      retryExchange = "X:routing.topic"
      exchangeType = "topic"
      passiveQueue = false
      passiveExchange = true
      qos = 0
      durableQueue = false
      autoDeleteQueue = true
      durableExchange = false
      internalExchange = false
    }
    request.get {
      queue = "Q:"${host}".api.request.get.lab"
      key = "request.oneGET.*"
      retryExchange = "X:routing.topic"
      exchangeType = "topic"
      passiveQueue = false
      passiveExchange = true
      qos = 0
      durableQueue = false
      autoDeleteQueue = true
      durableExchange = false
      internalExchange = false
    }
    reply {
      queue = "Q:"${host}".api.response.eco"
      key = "response.api"
      retryExchange = "X:routing.topic"
      exchangeType = "topic"
      passiveQueue = false
      passiveExchange = true
      qos = 0
      durableQueue = true
      autoDeleteQueue = true
      durableExchange = false
      internalExchange = false
    }
  }

  endpoints {
    exchange = "X:gateway.out.fanout"
  }

}
